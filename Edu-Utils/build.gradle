buildscript {
    ext.kotlin_version = '1.0.5'
    repositories {
        mavenCentral()
        maven {
            url "https://oss.sonatype.org/content/repositories/snapshots/"
        }
        maven {
            url 'http://dl.bintray.com/jetbrains/intellij-plugin-service'
        }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.intellij.plugins:gradle-intellij-plugin:0.2.0-SNAPSHOT"
    }
}

subprojects {

    apply plugin: 'java'
    apply plugin: "org.jetbrains.intellij"
    apply plugin: 'kotlin'

    tasks.withType(JavaCompile) { options.encoding = 'UTF-8' }

    sourceSets {
        main {
            java.srcDirs 'src'
            resources.srcDir 'resources'
        }
        test {
            java.srcDir 'test'
        }
    }

    intellij {
        if (project.hasProperty('ideaPath')) {
            localPath ideaPath
        }
        else {
            if (project.hasProperty('ideaVersion')) {
                version ideaVersion
            }
        }
        updateSinceUntilBuild Boolean.valueOf(updateBuildNumber)
        downloadSources Boolean.valueOf(downloadIdeaSources)
    }

    afterEvaluate {
        tasks.getByName('buildPlugin') {
            archiveName = "$intellij.pluginName-$version-${buildNumber}.zip"
        }
        deployPlugins.dependsOn(tasks.getByName('buildPlugin'))

    }

    buildDir = new File(rootProject.projectDir, "gradleBuild/" + project.name)

    if (!project.hasProperty('intellijCommunity')) {

        repositories {
            ivy {
                ivyPattern 'http://buildserver.labs.intellij.net/guestAuth/repository/download/Educational_CorePlugins/lastSuccessful/teamcity-ivy.xml'
                artifactPattern 'http://buildserver.labs.intellij.net/guestAuth/repository/download/Educational_CorePlugins/lastSuccessful/[artifact].[ext]'
            }
        }

        configurations {
            corePlugins
        }

        dependencies {
            corePlugins('org:Educational_CorePlugins:lastSuccessful')
            compile files(rootProject.projectDir.toString() + "/gradleBuild/student/classes")
        }

        task copyPlugins(type: Copy) {
            configurations.corePlugins.filter { dep -> dep.name.endsWith(".zip") }.each {
                from zipTree(it)
            }

            into rootProject.projectDir.toString() + "/gradleBuild"
        }
    }
}

task cleanPluginsDir(type: Delete) {
    delete fileTree(dir: "$rootProject.projectDir/plugins")
}

task deployPlugins(type: Copy) {
    dependsOn(cleanPluginsDir)
    def root = rootProject.projectDir.toString()
    def studentJar = "student-${version}.jar"
    from root + "/gradleBuild/student/libs/" + studentJar
    def courseCreatorJar = "course-creator-${version}.jar"
    from root + "/gradleBuild/course-creator/libs/" + courseCreatorJar
    into root + "/plugins"
    rename { filename ->
        filename.replace "$courseCreatorJar", "course-creator.jar"
    }
    rename { filename ->
        filename.replace "$studentJar", "student.jar"
    }
}

defineProject('Edu-Java', 'junit')
defineProject('Edu-Kotlin', 'junit', 'Kotlin')

def defineProject(String name, Object... pluginDependencies) {
    project(':' + name) {
        sourceSets {
            main {
                java.srcDirs '../src'
            }
        }

        if (!project.hasProperty('intellijCommunity')) {
            compileJava.dependsOn(copyPlugins)
        }
        else {
            Object[] newDependencies = Arrays.copyOf(pluginDependencies, pluginDependencies.length + 2)
            newDependencies[pluginDependencies.length] = project(':student')
            newDependencies[pluginDependencies.length + 1] = project(':course-creator')
            pluginDependencies = newDependencies
        }
        intellij {
            pluginName name
            plugins pluginDependencies
            sandboxDirectory = new File(rootProject.projectDir, "idea-sandbox/$name")
        }
        dependencies {
            if (project.hasProperty('intellijCommunity')) {
                compile project(':course-creator') {
                    dependencies {
                        compile project(':student') {
                            dependencies {
                                compile fileTree(dir: 'lib', include: ['*.jar'])
                            }
                        }
                    }
                }
            }
        }
    }
}